{"ast":null,"code":"var _jsxFileName = \"/home/ksani/fullstack22/part1/unicafe/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Button = b => /*#__PURE__*/_jsxDEV(\"button\", {\n  onClick: b.onClick,\n  children: b.text\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 5,\n  columnNumber: 3\n}, this);\n\n_c = Button;\n\nconst Stats = statsB => {\n  return /*#__PURE__*/_jsxDEV(\"tr\", {\n    children: [/*#__PURE__*/_jsxDEV(\"p\", {\n      children: statsB.name\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 13,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: statsB.value\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 12,\n    columnNumber: 5\n  }, this);\n};\n\n_c2 = Stats;\n\nconst Statistics = statsB => {\n  if (!statsB.isClicked) {\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"No feedback has been given yet\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 12\n    }, this);\n  } else {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Stats on votes\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(Stats, {\n        name: \"good\",\n        value: statsB.good\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 26,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Stats, {\n        name: \"neutral\",\n        value: statsB.neutral\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Stats, {\n        name: \"bad\",\n        value: statsB.bad\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Stats, {\n        name: \"total\",\n        value: statsB.total\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Stats, {\n        name: \"average\",\n        value: statsB.averageScore\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Stats, {\n        name: \"percPos\",\n        value: statsB.percPos + \"%\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 7\n    }, this);\n  }\n};\n\n_c3 = Statistics;\n\nconst getWAverage = (weightsarray, total) => {\n  const weights = weightsarray.reduce((w, i) => {\n    return w + i.number + i.weight;\n  }, 0);\n  let average = weights / total;\n  return average;\n};\n\nconst average = getWAverage([{\n  number: good,\n  weight: 1\n}, {\n  number: neutral,\n  weight: 0\n}, {\n  number: bad,\n  weight: -1\n}], total);\nconst percPos = good / total * 100; //when clicked, check which button and change value accordingly\n\nconst handleClick = which => {\n  setIsClicked(true); //    console.log(isClicked)\n\n  switch (which) {\n    case \"good\":\n      setGood(good + 1);\n      break;\n\n    case \"neutral\":\n      setNeutral(neutral + 1);\n      break;\n\n    case \"bad\":\n      setBad(bad + 1);\n      break;\n\n    default:\n      break;\n  }\n};\n\nconst statsB = {\n  good: good,\n  neutral: neutral,\n  bad: bad,\n  total: total,\n  average: average,\n  percPos: percPos,\n  isClicked: isClicked\n};\n\nconst App = () => {\n  _s();\n\n  // save buttons to their own state\n  const [good, setGood] = useState(0);\n  const [neutral, setNeutral] = useState(0);\n  const [bad, setBad] = useState(0);\n  const [isClicked, setIsClicked] = useState(false);\n  let total = good + neutral + bad;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"give feedback\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      onClick: () => handleClick(\"good\"),\n      text: \"good\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      onClick: () => handleClick(\"neutral\"),\n      text: \"neutral\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      onClick: () => handleClick(\"bad\"),\n      text: \"bad\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Statistics, { ...statsB\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 97,\n    columnNumber: 5\n  }, this);\n};\n\n_s(App, \"KPyREuBliJrR+gKoCA3z6hAXT3Q=\");\n\n_c4 = App;\nexport default App;\n\nvar _c, _c2, _c3, _c4;\n\n$RefreshReg$(_c, \"Button\");\n$RefreshReg$(_c2, \"Stats\");\n$RefreshReg$(_c3, \"Statistics\");\n$RefreshReg$(_c4, \"App\");","map":{"version":3,"sources":["/home/ksani/fullstack22/part1/unicafe/src/App.js"],"names":["React","useState","Button","b","onClick","text","Stats","statsB","name","value","Statistics","isClicked","good","neutral","bad","total","averageScore","percPos","getWAverage","weightsarray","weights","reduce","w","i","number","weight","average","handleClick","which","setIsClicked","setGood","setNeutral","setBad","App"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { useState } from 'react';\n\nconst Button=(b)=>(\n  <button onClick={b.onClick}>\n    {b.text}\n  </button>\n)\n\nconst Stats=(statsB)=>{\n  return(\n    <tr>\n      <p>{statsB.name}</p>\n      <p>{statsB.value}</p>\n    </tr>\n  )\n}\n\nconst Statistics=(statsB)=>{\n  if(!statsB.isClicked){\n    return <p>No feedback has been given yet</p>\n  }else{\n    return(\n      <div>\n      <h3>Stats on votes</h3>\n          <Stats name=\"good\" value={statsB.good}/>\n          <Stats name=\"neutral\" value={statsB.neutral}/>\n          <Stats name=\"bad\" value={statsB.bad}/>\n          <Stats name=\"total\" value={statsB.total}/>\n          <Stats name=\"average\" value={statsB.averageScore}/>\n          <Stats name=\"percPos\" value={statsB.percPos + \"%\"}/>\n    </div>\n    )\n  }\n  \n}\n\n\nconst getWAverage=(weightsarray, total)=>{\n  const weights=weightsarray.reduce((w, i)=>{\n    return w+i.number+i.weight}, 0)\n    let average=weights/total\n    return average\n}\nconst average=getWAverage(\n  [\n    {\n      number: good, weight:1\n    },{\n      number: neutral, weight:0\n    },{\n      number: bad, weight:-1\n    }\n  ], total\n)\nconst percPos=good/total*100\n\n\n//when clicked, check which button and change value accordingly\nconst handleClick=(which)=>{\n  setIsClicked(true)\n//    console.log(isClicked)\n  switch (which) {\n    case \"good\":\n      setGood(good+1);\n      break;\n    case \"neutral\":\n      setNeutral(neutral+1);\n      break;\n    case \"bad\":\n      setBad(bad+1);\n      break;\n    default:\n      break;\n  }\n}\nconst statsB={\n  good:good,\n  neutral:neutral,\n  bad:bad,\n  total:total,\n  average:average,\n  percPos:percPos,\n  isClicked:isClicked\n}\n\nconst App = () => {\n  // save buttons to their own state\n  const [good, setGood] = useState(0)\n  const [neutral, setNeutral] = useState(0)\n  const [bad, setBad] = useState(0)\n  const [isClicked, setIsClicked] = useState(false)\n  let total=good+neutral+bad\n\n\n  return (\n    <div>\n      <h1>give feedback</h1>\n      <Button onClick={()=> handleClick(\"good\")} text=\"good\"/>\n      <Button onClick={()=> handleClick(\"neutral\")} text=\"neutral\"/>\n      <Button onClick={()=> handleClick(\"bad\")} text=\"bad\"/>\n      <Statistics {...statsB} />\n    </div>\n  )\n}\n\nexport default App"]},"metadata":{},"sourceType":"module"}