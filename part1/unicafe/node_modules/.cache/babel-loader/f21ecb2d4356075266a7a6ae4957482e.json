{"ast":null,"code":"var _jsxFileName = \"/home/ksani/fullstack22/part1/unicafe/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Button = b => /*#__PURE__*/_jsxDEV(\"button\", {\n  onClick: b.handleClick,\n  children: b.text\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 5,\n  columnNumber: 3\n}, this);\n\n_c = Button;\nlet isClicked = false;\n\nconst Stats = statsB => {\n  return /*#__PURE__*/_jsxDEV(\"tr\", {\n    children: [/*#__PURE__*/_jsxDEV(\"p\", {\n      children: statsB.name\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: statsB.value\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 13,\n    columnNumber: 5\n  }, this);\n};\n\n_c2 = Stats;\n\nconst StatsGiven = statsB => {\n  if (!statsB.isClicked) {\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"No feedback has been given yet\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 12\n    }, this);\n  } else {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Stats on votes\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 26,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n        children: [/*#__PURE__*/_jsxDEV(Stats, {\n          name: \"good\",\n          value: statsB.good\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 28,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Stats, {\n          name: \"neutral\",\n          value: statsB.neutral\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 29,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Stats, {\n          name: \"bad\",\n          value: statsB.bad\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 30,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Stats, {\n          name: \"total\",\n          value: statsB.total\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 31,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Stats, {\n          name: \"average\",\n          value: statsB.averageScore\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 32,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Stats, {\n          name: \"percPos\",\n          value: statsB.percPos + \"%\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 33,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 7\n    }, this);\n  }\n};\n\n_c3 = StatsGiven;\n\nconst App = () => {\n  _s();\n\n  // save buttons to their own state\n  const [good, setGood] = useState(0);\n  const [neutral, setNeutral] = useState(0);\n  const [bad, setBad] = useState(0);\n  let total = good + neutral + bad;\n\n  const getWAverage = (weightsarray, total) => {\n    const weights = weightsarray.reduce((w, i) => {\n      return w + i.number + i.weight;\n    }, 0);\n    let average = weights / total;\n    return average;\n  };\n\n  const average = getWAverage([{\n    number: good,\n    weight: 1\n  }, {\n    number: neutral,\n    weight: 0\n  }, {\n    number: bad,\n    weight: -1\n  }], total);\n  const percPos = good / total * 100; //when clicked, check which button and change value accordingly\n\n  const handleClick = which => {\n    setIsClicked(true);\n\n    if (which = \"good\") {\n      setGood(good + 1);\n    }\n\n    if (which = \"neutral\") {\n      setNeutral(neutral + 1);\n    } else {\n      setBad(bad + 1);\n    }\n  };\n\n  const statsB = {\n    good: good,\n    neutral: neutral,\n    bad: bad,\n    total: total,\n    average: average,\n    percPos: percPos,\n    isClicked: isClicked\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"give feedback\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      onClick: () => handleClick(\"good\"),\n      text: \"good\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      onClick: () => handleClick(\"neutral\"),\n      text: \"neutral\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      onClick: () => handleClick(\"bad\"),\n      text: \"bad\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(StatsGiven, { ...statsB\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 90,\n    columnNumber: 5\n  }, this);\n};\n\n_s(App, \"eScCFcZxMV7EVTyq8/QmtvFilbs=\");\n\n_c4 = App;\nexport default App;\n\nvar _c, _c2, _c3, _c4;\n\n$RefreshReg$(_c, \"Button\");\n$RefreshReg$(_c2, \"Stats\");\n$RefreshReg$(_c3, \"StatsGiven\");\n$RefreshReg$(_c4, \"App\");","map":{"version":3,"sources":["/home/ksani/fullstack22/part1/unicafe/src/App.js"],"names":["React","useState","Button","b","handleClick","text","isClicked","Stats","statsB","name","value","StatsGiven","good","neutral","bad","total","averageScore","percPos","App","setGood","setNeutral","setBad","getWAverage","weightsarray","weights","reduce","w","i","number","weight","average","which","setIsClicked"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { useState } from 'react';\n\nconst Button=(b)=>(\n  <button onClick={b.handleClick}>\n    {b.text}\n  </button>\n)\nlet isClicked=false\n\nconst Stats=(statsB)=>{\n  return(\n    <tr>\n      <p>{statsB.name}</p>\n      <p>{statsB.value}</p>\n    </tr>\n  )\n}\n\nconst StatsGiven=(statsB)=>{\n  if(!statsB.isClicked){\n    return <p>No feedback has been given yet</p>\n  }else{\n    return(\n      <div>\n      <h3>Stats on votes</h3>\n      <table>\n          <Stats name=\"good\" value={statsB.good}/>\n          <Stats name=\"neutral\" value={statsB.neutral}/>\n          <Stats name=\"bad\" value={statsB.bad}/>\n          <Stats name=\"total\" value={statsB.total}/>\n          <Stats name=\"average\" value={statsB.averageScore}/>\n          <Stats name=\"percPos\" value={statsB.percPos + \"%\"}/>\n      </table>\n    </div>\n    )\n  }\n  \n}\n\nconst App = () => {\n  // save buttons to their own state\n  const [good, setGood] = useState(0)\n  const [neutral, setNeutral] = useState(0)\n  const [bad, setBad] = useState(0)\n  let total=good+neutral+bad\n\n  const getWAverage=(weightsarray, total)=>{\n    const weights=weightsarray.reduce((w, i)=>{\n      return w+i.number+i.weight}, 0)\n      let average=weights/total\n      return average\n  }\n  const average=getWAverage(\n    [\n      {\n        number: good, weight:1\n      },{\n        number: neutral, weight:0\n      },{\n        number: bad, weight:-1\n      }\n    ], total\n  )\n  const percPos=good/total*100\n  \n  \n  //when clicked, check which button and change value accordingly\n  const handleClick=(which)=>{\n    setIsClicked(true)\n    if (which=\"good\"){\n      setGood(good+1)\n    }if (which=\"neutral\") {\n      setNeutral(neutral+1)\n    } else {\n      setBad(bad+1)\n    }\n  }\n  const statsB={\n    good:good,\n    neutral:neutral,\n    bad:bad,\n    total:total,\n    average:average,\n    percPos:percPos,\n    isClicked:isClicked\n  }\n\n  return (\n    <div>\n      <h1>give feedback</h1>\n      <Button onClick={()=> handleClick(\"good\")} text=\"good\"/>\n      <Button onClick={()=> handleClick(\"neutral\")} text=\"neutral\"/>\n      <Button onClick={()=> handleClick(\"bad\")} text=\"bad\"/>\n      <StatsGiven {...statsB} />\n    </div>\n  )\n}\n\nexport default App"]},"metadata":{},"sourceType":"module"}