{"ast":null,"code":"var _jsxFileName = \"/home/ksani/fullstack22/part1/unicafe/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Button = b => /*#__PURE__*/_jsxDEV(\"button\", {\n  onClick: b.onClick,\n  children: b.text\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 5,\n  columnNumber: 3\n}, this);\n\n_c = Button;\n\nconst StatisticLine = statsB => {\n  return /*#__PURE__*/_jsxDEV(\"tr\", {\n    children: /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [statsB.name, \" \", statsB.value]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 13,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 12,\n    columnNumber: 5\n  }, this);\n};\n\n_c2 = StatisticLine;\n\nconst Statistics = statsB => {\n  if (!statsB.isClicked) {\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"No feedback has been given yet\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 12\n    }, this);\n  } else {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Statistics on votes\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 24,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n        children: /*#__PURE__*/_jsxDEV(\"tbody\", {\n          children: [/*#__PURE__*/_jsxDEV(StatisticLine, {\n            name: \"good\",\n            value: statsB.good\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 27,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(StatisticLine, {\n            name: \"neutral\",\n            value: statsB.neutral\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 28,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(StatisticLine, {\n            name: \"bad\",\n            value: statsB.bad\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 29,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(StatisticLine, {\n            name: \"total\",\n            value: statsB.total\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 30,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(StatisticLine, {\n            name: \"average\",\n            value: statsB.averageScore\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 31,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(StatisticLine, {\n            name: \"percPos\",\n            value: statsB.percPos + \"%\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 32,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 26,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 9\n    }, this);\n  }\n};\n\n_c3 = Statistics;\nconst anecdotes = ['If it hurts, do it more often.', 'Adding manpower to a late software project makes it later!', 'The first 90 percent of the code accounts for the first 90 percent of the development time...The remaining 10 percent of the code accounts for the other 90 percent of the development time.', 'Any fool can write code that a computer can understand. Good programmers write code that humans can understand.', 'Premature optimization is the root of all evil.', 'Debugging is twice as hard as writing the code in the first place. Therefore, if you write the code as cleverly as possible, you are, by definition, not smart enough to debug it.', 'Programming without an extremely heavy use of console.log is same as if a doctor would refuse to use x-rays or blood tests when dianosing patients.'];\n\nconst App = () => {\n  _s();\n\n  // save buttons to their own state\n  const [good, setGood] = useState(0);\n  const [neutral, setNeutral] = useState(0);\n  const [bad, setBad] = useState(0);\n  const [isClicked, setIsClicked] = useState(false);\n  let total = good + neutral + bad;\n  const [selected, setSelected] = useState(0);\n\n  const getWAverage = (weightsarray, total) => {\n    const weights = weightsarray.reduce((w, i) => {\n      return w + i.number + i.weight;\n    }, 0);\n    let average = weights / total;\n    return average;\n  };\n\n  const average = getWAverage([{\n    number: good,\n    weight: 1\n  }, {\n    number: neutral,\n    weight: 0\n  }, {\n    number: bad,\n    weight: -1\n  }], total);\n  const percPos = good / total * 100; //when clicked, check which button and change value accordingly\n\n  const handleClick = which => {\n    setIsClicked(true); //    console.log(isClicked)\n\n    switch (which) {\n      case \"good\":\n        setGood(good + 1);\n        break;\n\n      case \"neutral\":\n        setNeutral(neutral + 1);\n        break;\n\n      case \"bad\":\n        setBad(bad + 1);\n        break;\n\n      default:\n        break;\n    }\n  };\n\n  const statsB = {\n    good: good,\n    neutral: neutral,\n    bad: bad,\n    total: total,\n    average: average,\n    percPos: percPos,\n    isClicked: isClicked,\n    selected: selected\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"give feedback\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      onClick: () => handleClick(\"good\"),\n      text: \"good\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      onClick: () => handleClick(\"neutral\"),\n      text: \"neutral\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      onClick: () => handleClick(\"bad\"),\n      text: \"bad\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Statistics, { ...statsB\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: anecdotes[selected]\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 109,\n    columnNumber: 5\n  }, this);\n};\n\n_s(App, \"k1XQAXxe2C2lMHSdwRpOr+IxK/8=\");\n\n_c4 = App;\nexport default App;\n\nvar _c, _c2, _c3, _c4;\n\n$RefreshReg$(_c, \"Button\");\n$RefreshReg$(_c2, \"StatisticLine\");\n$RefreshReg$(_c3, \"Statistics\");\n$RefreshReg$(_c4, \"App\");","map":{"version":3,"sources":["/home/ksani/fullstack22/part1/unicafe/src/App.js"],"names":["React","useState","Button","b","onClick","text","StatisticLine","statsB","name","value","Statistics","isClicked","good","neutral","bad","total","averageScore","percPos","anecdotes","App","setGood","setNeutral","setBad","setIsClicked","selected","setSelected","getWAverage","weightsarray","weights","reduce","w","i","number","weight","average","handleClick","which"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { useState } from 'react';\n\nconst Button=(b)=>(\n  <button onClick={b.onClick}>\n    {b.text}\n  </button>\n)\n\nconst StatisticLine=(statsB)=>{\n  return(\n    <tr>\n      <p>{statsB.name} {statsB.value}</p>\n    </tr>\n  )\n}\n\nconst Statistics=(statsB)=>{\n  if(!statsB.isClicked){\n    return <p>No feedback has been given yet</p>\n  } else {\n      return(\n        <div>\n        <h3>Statistics on votes</h3>\n        <table>\n          <tbody>\n            <StatisticLine name=\"good\" value={statsB.good}/>\n            <StatisticLine name=\"neutral\" value={statsB.neutral}/>\n            <StatisticLine name=\"bad\" value={statsB.bad}/>\n            <StatisticLine name=\"total\" value={statsB.total}/>\n            <StatisticLine name=\"average\" value={statsB.averageScore}/>\n            <StatisticLine name=\"percPos\" value={statsB.percPos + \"%\"}/>\n          </tbody>\n        </table>  \n      </div>\n      )\n  }\n  \n}\nconst anecdotes=[\n  'If it hurts, do it more often.',\n  'Adding manpower to a late software project makes it later!',\n  'The first 90 percent of the code accounts for the first 90 percent of the development time...The remaining 10 percent of the code accounts for the other 90 percent of the development time.',\n  'Any fool can write code that a computer can understand. Good programmers write code that humans can understand.',\n  'Premature optimization is the root of all evil.',\n  'Debugging is twice as hard as writing the code in the first place. Therefore, if you write the code as cleverly as possible, you are, by definition, not smart enough to debug it.',\n  'Programming without an extremely heavy use of console.log is same as if a doctor would refuse to use x-rays or blood tests when dianosing patients.'\n]\n\nconst App = () => {\n  // save buttons to their own state\n  const [good, setGood] = useState(0)\n  const [neutral, setNeutral] = useState(0)\n  const [bad, setBad] = useState(0)\n  const [isClicked, setIsClicked] = useState(false)\n  let total=good+neutral+bad\n  const [selected, setSelected]=useState(0)\n\n  const getWAverage=(weightsarray, total)=>{\n    const weights=weightsarray.reduce((w, i)=>{\n      return w+i.number+i.weight}, 0)\n      let average=weights/total\n      return average\n  }\n  const average=getWAverage(\n    [\n      {\n        number: good, weight:1\n      },{\n        number: neutral, weight:0\n      },{\n        number: bad, weight:-1\n      }\n    ], total\n  )\n  const percPos=good/total*100\n  \n  \n  //when clicked, check which button and change value accordingly\n  const handleClick=(which)=>{\n    setIsClicked(true)\n//    console.log(isClicked)\n    switch (which) {\n      case \"good\":\n        setGood(good+1);\n        break;\n      case \"neutral\":\n        setNeutral(neutral+1);\n        break;\n      case \"bad\":\n        setBad(bad+1);\n        break;\n      default:\n        break;\n    }\n  }\n  const statsB={\n    good:good,\n    neutral:neutral,\n    bad:bad,\n    total:total,\n    average:average,\n    percPos:percPos,\n    isClicked:isClicked,\n    selected:selected\n  }\n\n  return (\n    <div>\n      <h1>give feedback</h1>\n      <Button onClick={()=> handleClick(\"good\")} text=\"good\"/>\n      <Button onClick={()=> handleClick(\"neutral\")} text=\"neutral\"/>\n      <Button onClick={()=> handleClick(\"bad\")} text=\"bad\"/>\n      <Statistics {...statsB} />\n      <p>{anecdotes[selected]}</p>\n    </div>\n  )\n}\n\nexport default App"]},"metadata":{},"sourceType":"module"}