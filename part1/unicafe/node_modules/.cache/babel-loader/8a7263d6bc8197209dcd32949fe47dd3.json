{"ast":null,"code":"var _jsxFileName = \"/home/ksani/fullstack22/part1/unicafe/src/App.js\";\nimport React from 'react';\nimport { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Button = b => /*#__PURE__*/_jsxDEV(\"button\", {\n  onClick: b.handleClick,\n  children: b.text\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 5,\n  columnNumber: 3\n}, this);\n\n_c = Button;\n\nconst Stats = statsB => {\n  return /*#__PURE__*/_jsxDEV(\"tr\", {\n    children: [/*#__PURE__*/_jsxDEV(\"p\", {\n      children: statsB.name\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 12,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: statsB.value\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 13,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 11,\n    columnNumber: 5\n  }, this);\n};\n\n_c2 = Stats;\n\nconst StatsGiven = statsB => {\n  var _s = $RefreshSig$();\n\n  if (!statsB.isClicked) {\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"No feedback has been given yet\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 12\n    }, this);\n  }\n\n  const App = () => {\n    _s();\n\n    // save buttons to their own state\n    const [good, setGood] = useState(0);\n    const [neutral, setNeutral] = useState(0);\n    const [bad, setBad] = useState(0);\n    let total = good + neutral + bad; //when clicked, check which button and change value accordingly\n\n    const handleClick = which => {\n      setIsClicked(true);\n\n      if (which = \"good\") {\n        setGood(good + 1);\n      }\n\n      if (which = \"neutral\") {\n        setNeutral(neutral + 1);\n      } else {\n        setBad(bad + 1);\n      }\n    };\n\n    const statsB = {\n      good: good,\n      neutral: neutral,\n      bad: bad,\n      total: total,\n      average: average,\n      percPos: percPos,\n      isClicked: isClicked\n    };\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"give feedback\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        onClick: () => handleClick(\"good\"),\n        text: \"good\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        onClick: () => handleClick(\"neutral\"),\n        text: \"neutral\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        onClick: () => handleClick(\"bad\"),\n        text: \"bad\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(StatsGiven, { ...statsB\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 5\n    }, this);\n  };\n\n  _s(App, \"eScCFcZxMV7EVTyq8/QmtvFilbs=\");\n};\n\n_c3 = StatsGiven;\nexport default App;\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"Button\");\n$RefreshReg$(_c2, \"Stats\");\n$RefreshReg$(_c3, \"StatsGiven\");","map":{"version":3,"sources":["/home/ksani/fullstack22/part1/unicafe/src/App.js"],"names":["React","useState","Button","b","handleClick","text","Stats","statsB","name","value","StatsGiven","isClicked","App","good","setGood","neutral","setNeutral","bad","setBad","total","which","setIsClicked","average","percPos"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,QAAT,QAAyB,OAAzB;;;AAEA,MAAMC,MAAM,GAAEC,CAAD,iBACX;AAAQ,EAAA,OAAO,EAAEA,CAAC,CAACC,WAAnB;AAAA,YACGD,CAAC,CAACE;AADL;AAAA;AAAA;AAAA;AAAA,QADF;;KAAMH,M;;AAKN,MAAMI,KAAK,GAAEC,MAAD,IAAU;AACpB,sBACE;AAAA,4BACE;AAAA,gBAAIA,MAAM,CAACC;AAAX;AAAA;AAAA;AAAA;AAAA,YADF,eAEE;AAAA,gBAAID,MAAM,CAACE;AAAX;AAAA;AAAA;AAAA;AAAA,YAFF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAMD,CAPD;;MAAMH,K;;AAQN,MAAMI,UAAU,GAAEH,MAAD,IAAU;AAAA;;AACzB,MAAG,CAACA,MAAM,CAACI,SAAX,EAAqB;AACnB,wBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAP;AACD;;AAGH,QAAMC,GAAG,GAAG,MAAM;AAAA;;AAChB;AACA,UAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBb,QAAQ,CAAC,CAAD,CAAhC;AACA,UAAM,CAACc,OAAD,EAAUC,UAAV,IAAwBf,QAAQ,CAAC,CAAD,CAAtC;AACA,UAAM,CAACgB,GAAD,EAAMC,MAAN,IAAgBjB,QAAQ,CAAC,CAAD,CAA9B;AACA,QAAIkB,KAAK,GAACN,IAAI,GAACE,OAAL,GAAaE,GAAvB,CALgB,CAOhB;;AACA,UAAMb,WAAW,GAAEgB,KAAD,IAAS;AACzBC,MAAAA,YAAY,CAAC,IAAD,CAAZ;;AAEA,UAAID,KAAK,GAAC,MAAV,EAAiB;AACfN,QAAAA,OAAO,CAACD,IAAI,GAAC,CAAN,CAAP;AACD;;AAAA,UAAIO,KAAK,GAAC,SAAV,EAAqB;AACpBJ,QAAAA,UAAU,CAACD,OAAO,GAAC,CAAT,CAAV;AACD,OAFA,MAEM;AACLG,QAAAA,MAAM,CAACD,GAAG,GAAC,CAAL,CAAN;AACD;AACF,KAVD;;AAWA,UAAMV,MAAM,GAAC;AACXM,MAAAA,IAAI,EAACA,IADM;AAEXE,MAAAA,OAAO,EAACA,OAFG;AAGXE,MAAAA,GAAG,EAACA,GAHO;AAIXE,MAAAA,KAAK,EAACA,KAJK;AAKXG,MAAAA,OAAO,EAACA,OALG;AAMXC,MAAAA,OAAO,EAACA,OANG;AAOXZ,MAAAA,SAAS,EAACA;AAPC,KAAb;AAUA,wBACE;AAAA,8BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAEE,QAAC,MAAD;AAAQ,QAAA,OAAO,EAAE,MAAKP,WAAW,CAAC,MAAD,CAAjC;AAA2C,QAAA,IAAI,EAAC;AAAhD;AAAA;AAAA;AAAA;AAAA,cAFF,eAGE,QAAC,MAAD;AAAQ,QAAA,OAAO,EAAE,MAAKA,WAAW,CAAC,SAAD,CAAjC;AAA8C,QAAA,IAAI,EAAC;AAAnD;AAAA;AAAA;AAAA;AAAA,cAHF,eAIE,QAAC,MAAD;AAAQ,QAAA,OAAO,EAAE,MAAKA,WAAW,CAAC,KAAD,CAAjC;AAA0C,QAAA,IAAI,EAAC;AAA/C;AAAA;AAAA;AAAA;AAAA,cAJF,eAKE,QAAC,UAAD,OAAgBG;AAAhB;AAAA;AAAA;AAAA;AAAA,cALF;AAAA;AAAA;AAAA;AAAA;AAAA,YADF;AASD,GAtCD;;AAN2B,KAMrBK,GANqB;AA6C1B,CA7CD;;MAAMF,U;AA+CN,eAAeE,GAAf","sourcesContent":["import React from 'react';\nimport { useState } from 'react';\n\nconst Button=(b)=>(\n  <button onClick={b.handleClick}>\n    {b.text}\n  </button>\n)\nconst Stats=(statsB)=>{\n  return(\n    <tr>\n      <p>{statsB.name}</p>\n      <p>{statsB.value}</p>\n    </tr>\n  )\n}\nconst StatsGiven=(statsB)=>{\n  if(!statsB.isClicked){\n    return <p>No feedback has been given yet</p>\n  }\n  \n\nconst App = () => {\n  // save buttons to their own state\n  const [good, setGood] = useState(0)\n  const [neutral, setNeutral] = useState(0)\n  const [bad, setBad] = useState(0)\n  let total=good+neutral+bad\n  \n  //when clicked, check which button and change value accordingly\n  const handleClick=(which)=>{\n    setIsClicked(true)\n\n    if (which=\"good\"){\n      setGood(good+1)\n    }if (which=\"neutral\") {\n      setNeutral(neutral+1)\n    } else {\n      setBad(bad+1)\n    }\n  }\n  const statsB={\n    good:good,\n    neutral:neutral,\n    bad:bad,\n    total:total,\n    average:average,\n    percPos:percPos,\n    isClicked:isClicked\n  }\n\n  return (\n    <div>\n      <h1>give feedback</h1>\n      <Button onClick={()=> handleClick(\"good\")} text=\"good\"/>\n      <Button onClick={()=> handleClick(\"neutral\")} text=\"neutral\"/>\n      <Button onClick={()=> handleClick(\"bad\")} text=\"bad\"/>\n      <StatsGiven {...statsB} />\n    </div>\n  )\n}\n}\n\nexport default App"]},"metadata":{},"sourceType":"module"}